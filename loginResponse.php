<?php

// This is a autogenerated file:LoginResponse

class LoginResponse {
    private bool $success; // json:success Required
    private string $message; // json:message Required
    private Data $data; // json:data Required

    /**
     * @param bool $success
     * @param string $message
     * @param Data $data
     */
    public function __construct(bool $success, string $message, Data $data) {
        $this->success = $success;
        $this->message = $message;
        $this->data = $data;
    }

    /**
     * @param bool $value
     * @throws Exception
     * @return bool
     */
    public static function fromSuccess(bool $value): bool {
        return $value; /*bool*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function toSuccess(): bool {
        if (LoginResponse::validateSuccess($this->success))  {
            return $this->success; /*bool*/
        }
        throw new Exception('never get to this LoginResponse::success');
    }

    /**
     * @param bool
     * @return bool
     * @throws Exception
     */
    public static function validateSuccess(bool $value): bool {
        if (!is_bool($value)) {
            throw new Exception("Attribute Error:LoginResponse::success");
        }
        return true;
    }

    /**
     * @return bool
     */
    public function getSuccess(): bool {
        return $this->success;
    }

    /**
     * @return bool
     */
    public static function sampleSuccess(): bool {
        return true; /*31:success*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromMessage(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toMessage(): string {
        if (LoginResponse::validateMessage($this->message))  {
            return $this->message; /*string*/
        }
        throw new Exception('never get to this LoginResponse::message');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateMessage(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:LoginResponse::message");
        }
        return true;
    }

    /**
     * @return string
     */
    public function getMessage(): string {
        return $this->message;
    }

    /**
     * @return string
     */
    public static function sampleMessage(): string {
        return 'LoginResponse::message::32'; /*32:message*/
    }

    /**
     * @param stdClass $value
     * @throws Exception
     * @return Data
     */
    public static function fromData(stdClass $value): Data {
        return Data::from($value); /*class*/
    }

    /**
     * @throws Exception
     * @return stdClass
     */
    public function toData(): stdClass {
        if (LoginResponse::validateData($this->data))  {
            return $this->data->to(); /*class*/
        }
        throw new Exception('never get to this LoginResponse::data');
    }

    /**
     * @param Data
     * @return bool
     * @throws Exception
     */
    public static function validateData(Data $value): bool {
        $value->validate();
        return true;
    }

    /**
     * @return Data
     */
    public function getData(): Data {
        return $this->data;
    }

    /**
     * @return Data
     */
    public static function sampleData(): Data {
        return Data::sample(); /*33:data*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return LoginResponse::validateSuccess($this->success)
        || LoginResponse::validateMessage($this->message)
        || LoginResponse::validateData($this->data);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'success'} = $this->toSuccess();
        $out->{'message'} = $this->toMessage();
        $out->{'data'} = $this->toData();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return LoginResponse
     * @throws Exception
     */
    public static function from(stdClass $obj): LoginResponse {
        LoginResponse::validateSuccess($this->success, true);
        LoginResponse::validateMessage($this->message, true);
        LoginResponse::validateData($this->data, true);
        return new LoginResponse(
         LoginResponse::fromSuccess($obj->{'success'})
        ,LoginResponse::fromMessage($obj->{'message'})
        ,LoginResponse::fromData($obj->{'data'})
        );
    }

    /**
     * @return LoginResponse
     */
    public static function sample(): LoginResponse {
        return new LoginResponse(
         LoginResponse::sampleSuccess()
        ,LoginResponse::sampleMessage()
        ,LoginResponse::sampleData()
        );
    }
}

// This is a autogenerated file:Data

class Data {
    private string $id; // json:id Required
    private string $name; // json:name Required
    private string $lastname; // json:lastname Required
    private string $email; // json:email Required
    private string $phone; // json:phone Required
    private string $image; // json:image Required
    private string $sessionToken; // json:session_token Required
    private array $roles; // json:roles Required

    /**
     * @param string $id
     * @param string $name
     * @param string $lastname
     * @param string $email
     * @param string $phone
     * @param string $image
     * @param string $sessionToken
     * @param array $roles
     */
    public function __construct(string $id, string $name, string $lastname, string $email, string $phone, string $image, string $sessionToken, array $roles) {
        $this->id = $id;
        $this->name = $name;
        $this->lastname = $lastname;
        $this->email = $email;
        $this->phone = $phone;
        $this->image = $image;
        $this->sessionToken = $sessionToken;
        $this->roles = $roles;
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromID(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toID(): string {
        if (Data::validateID($this->id))  {
            return $this->id; /*string*/
        }
        throw new Exception('never get to this Data::id');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateID(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Data::id");
        }
        return true;
    }

    /**
     * @return string
     */
    public function getID(): string {
        return $this->id;
    }

    /**
     * @return string
     */
    public static function sampleID(): string {
        return 'Data::id::31'; /*31:id*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromName(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toName(): string {
        if (Data::validateName($this->name))  {
            return $this->name; /*string*/
        }
        throw new Exception('never get to this Data::name');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateName(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Data::name");
        }
        return true;
    }

    /**
     * @return string
     */
    public function getName(): string {
        return $this->name;
    }

    /**
     * @return string
     */
    public static function sampleName(): string {
        return 'Data::name::32'; /*32:name*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromLastname(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toLastname(): string {
        if (Data::validateLastname($this->lastname))  {
            return $this->lastname; /*string*/
        }
        throw new Exception('never get to this Data::lastname');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateLastname(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Data::lastname");
        }
        return true;
    }

    /**
     * @return string
     */
    public function getLastname(): string {
        return $this->lastname;
    }

    /**
     * @return string
     */
    public static function sampleLastname(): string {
        return 'Data::lastname::33'; /*33:lastname*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromEmail(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toEmail(): string {
        if (Data::validateEmail($this->email))  {
            return $this->email; /*string*/
        }
        throw new Exception('never get to this Data::email');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateEmail(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Data::email");
        }
        return true;
    }

    /**
     * @return string
     */
    public function getEmail(): string {
        return $this->email;
    }

    /**
     * @return string
     */
    public static function sampleEmail(): string {
        return 'Data::email::34'; /*34:email*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromPhone(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toPhone(): string {
        if (Data::validatePhone($this->phone))  {
            return $this->phone; /*string*/
        }
        throw new Exception('never get to this Data::phone');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validatePhone(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Data::phone");
        }
        return true;
    }

    /**
     * @return string
     */
    public function getPhone(): string {
        return $this->phone;
    }

    /**
     * @return string
     */
    public static function samplePhone(): string {
        return 'Data::phone::35'; /*35:phone*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromImage(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toImage(): string {
        if (Data::validateImage($this->image))  {
            return $this->image; /*string*/
        }
        throw new Exception('never get to this Data::image');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateImage(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Data::image");
        }
        return true;
    }

    /**
     * @return string
     */
    public function getImage(): string {
        return $this->image;
    }

    /**
     * @return string
     */
    public static function sampleImage(): string {
        return 'Data::image::36'; /*36:image*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromSessionToken(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toSessionToken(): string {
        if (Data::validateSessionToken($this->sessionToken))  {
            return $this->sessionToken; /*string*/
        }
        throw new Exception('never get to this Data::sessionToken');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateSessionToken(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Data::sessionToken");
        }
        return true;
    }

    /**
     * @return string
     */
    public function getSessionToken(): string {
        return $this->sessionToken;
    }

    /**
     * @return string
     */
    public static function sampleSessionToken(): string {
        return 'Data::sessionToken::37'; /*37:sessionToken*/
    }

    /**
     * @param array $value
     * @throws Exception
     * @return array
     */
    public static function fromRoles(array $value): array {
        return  array_map(function ($value) {
            return Role::from($value); /*class*/
        }, $value);
    }

    /**
     * @throws Exception
     * @return array
     */
    public function toRoles(): array {
        if (Data::validateRoles($this->roles))  {
            return array_map(function ($value) {
                return $value->to(); /*class*/
            }, $this->roles);
        }
        throw new Exception('never get to this Data::roles');
    }

    /**
     * @param array
     * @return bool
     * @throws Exception
     */
    public static function validateRoles(array $value): bool {
        if (!is_array($value)) {
            throw new Exception("Attribute Error:Data::roles");
        }
        array_walk($value, function($value_v) {
            $value_v->validate();
        });
        return true;
    }

    /**
     * @return array
     */
    public function getRoles(): array {
        return $this->roles;
    }

    /**
     * @return array
     */
    public static function sampleRoles(): array {
        return  array(
            Role::sample() /*38:*/
        ); /* 38:roles*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Data::validateID($this->id)
        || Data::validateName($this->name)
        || Data::validateLastname($this->lastname)
        || Data::validateEmail($this->email)
        || Data::validatePhone($this->phone)
        || Data::validateImage($this->image)
        || Data::validateSessionToken($this->sessionToken)
        || Data::validateRoles($this->roles);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'id'} = $this->toID();
        $out->{'name'} = $this->toName();
        $out->{'lastname'} = $this->toLastname();
        $out->{'email'} = $this->toEmail();
        $out->{'phone'} = $this->toPhone();
        $out->{'image'} = $this->toImage();
        $out->{'session_token'} = $this->toSessionToken();
        $out->{'roles'} = $this->toRoles();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Data
     * @throws Exception
     */
    public static function from(stdClass $obj): Data {
        Data::validateID($this->id, true);
        Data::validateName($this->name, true);
        Data::validateLastname($this->lastname, true);
        Data::validateEmail($this->email, true);
        Data::validatePhone($this->phone, true);
        Data::validateImage($this->image, true);
        Data::validateSessionToken($this->sessionToken, true);
        Data::validateRoles($this->roles, true);
        return new Data(
         Data::fromID($obj->{'id'})
        ,Data::fromName($obj->{'name'})
        ,Data::fromLastname($obj->{'lastname'})
        ,Data::fromEmail($obj->{'email'})
        ,Data::fromPhone($obj->{'phone'})
        ,Data::fromImage($obj->{'image'})
        ,Data::fromSessionToken($obj->{'session_token'})
        ,Data::fromRoles($obj->{'roles'})
        );
    }

    /**
     * @return Data
     */
    public static function sample(): Data {
        return new Data(
         Data::sampleID()
        ,Data::sampleName()
        ,Data::sampleLastname()
        ,Data::sampleEmail()
        ,Data::samplePhone()
        ,Data::sampleImage()
        ,Data::sampleSessionToken()
        ,Data::sampleRoles()
        );
    }
}

// This is a autogenerated file:Role

class Role {
    private string $id; // json:id Required
    private string $name; // json:name Required
    private string $image; // json:image Required
    private string $route; // json:route Required

    /**
     * @param string $id
     * @param string $name
     * @param string $image
     * @param string $route
     */
    public function __construct(string $id, string $name, string $image, string $route) {
        $this->id = $id;
        $this->name = $name;
        $this->image = $image;
        $this->route = $route;
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromID(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toID(): string {
        if (Role::validateID($this->id))  {
            return $this->id; /*string*/
        }
        throw new Exception('never get to this Role::id');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateID(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Role::id");
        }
        return true;
    }

    /**
     * @return string
     */
    public function getID(): string {
        return $this->id;
    }

    /**
     * @return string
     */
    public static function sampleID(): string {
        return 'Role::id::31'; /*31:id*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromName(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toName(): string {
        if (Role::validateName($this->name))  {
            return $this->name; /*string*/
        }
        throw new Exception('never get to this Role::name');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateName(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Role::name");
        }
        return true;
    }

    /**
     * @return string
     */
    public function getName(): string {
        return $this->name;
    }

    /**
     * @return string
     */
    public static function sampleName(): string {
        return 'Role::name::32'; /*32:name*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromImage(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toImage(): string {
        if (Role::validateImage($this->image))  {
            return $this->image; /*string*/
        }
        throw new Exception('never get to this Role::image');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateImage(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Role::image");
        }
        return true;
    }

    /**
     * @return string
     */
    public function getImage(): string {
        return $this->image;
    }

    /**
     * @return string
     */
    public static function sampleImage(): string {
        return 'Role::image::33'; /*33:image*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromRoute(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toRoute(): string {
        if (Role::validateRoute($this->route))  {
            return $this->route; /*string*/
        }
        throw new Exception('never get to this Role::route');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateRoute(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Role::route");
        }
        return true;
    }

    /**
     * @return string
     */
    public function getRoute(): string {
        return $this->route;
    }

    /**
     * @return string
     */
    public static function sampleRoute(): string {
        return 'Role::route::34'; /*34:route*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Role::validateID($this->id)
        || Role::validateName($this->name)
        || Role::validateImage($this->image)
        || Role::validateRoute($this->route);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'id'} = $this->toID();
        $out->{'name'} = $this->toName();
        $out->{'image'} = $this->toImage();
        $out->{'route'} = $this->toRoute();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Role
     * @throws Exception
     */
    public static function from(stdClass $obj): Role {
        Role::validateID($this->id, true);
        Role::validateName($this->name, true);
        Role::validateImage($this->image, true);
        Role::validateRoute($this->route, true);
        return new Role(
         Role::fromID($obj->{'id'})
        ,Role::fromName($obj->{'name'})
        ,Role::fromImage($obj->{'image'})
        ,Role::fromRoute($obj->{'route'})
        );
    }

    /**
     * @return Role
     */
    public static function sample(): Role {
        return new Role(
         Role::sampleID()
        ,Role::sampleName()
        ,Role::sampleImage()
        ,Role::sampleRoute()
        );
    }
}
