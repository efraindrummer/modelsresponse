<?php

// This is a autogenerated file:ResponseGetAllUsersRoles

class ResponseGetAllUsersRoles {
    private string $id; // json:id Required
    private string $email; // json:email Required
    private string $name; // json:name Required
    private string $lastname; // json:lastname Required
    private string $image; // json:image Required
    private string $phone; // json:phone Required
    private string $password; // json:password Required
    private string $notificationToken; // json:notification_token Required
    private string $roles; // json:roles Required

    /**
     * @param string $id
     * @param string $email
     * @param string $name
     * @param string $lastname
     * @param string $image
     * @param string $phone
     * @param string $password
     * @param string $notificationToken
     * @param string $roles
     */
    public function __construct(string $id, string $email, string $name, string $lastname, string $image, string $phone, string $password, string $notificationToken, string $roles) {
        $this->id = $id;
        $this->email = $email;
        $this->name = $name;
        $this->lastname = $lastname;
        $this->image = $image;
        $this->phone = $phone;
        $this->password = $password;
        $this->notificationToken = $notificationToken;
        $this->roles = $roles;
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromID(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toID(): string {
        if (ResponseGetAllUsersRoles::validateID($this->id))  {
            return $this->id; /*string*/
        }
        throw new Exception('never get to this ResponseGetAllUsersRoles::id');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateID(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:ResponseGetAllUsersRoles::id");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getID(): string {
        if (ResponseGetAllUsersRoles::validateID($this->id))  {
            return $this->id;
        }
        throw new Exception('never get to getID ResponseGetAllUsersRoles::id');
    }

    /**
     * @return string
     */
    public static function sampleID(): string {
        return 'ResponseGetAllUsersRoles::id::31'; /*31:id*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromEmail(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toEmail(): string {
        if (ResponseGetAllUsersRoles::validateEmail($this->email))  {
            return $this->email; /*string*/
        }
        throw new Exception('never get to this ResponseGetAllUsersRoles::email');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateEmail(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:ResponseGetAllUsersRoles::email");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getEmail(): string {
        if (ResponseGetAllUsersRoles::validateEmail($this->email))  {
            return $this->email;
        }
        throw new Exception('never get to getEmail ResponseGetAllUsersRoles::email');
    }

    /**
     * @return string
     */
    public static function sampleEmail(): string {
        return 'ResponseGetAllUsersRoles::email::32'; /*32:email*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromName(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toName(): string {
        if (ResponseGetAllUsersRoles::validateName($this->name))  {
            return $this->name; /*string*/
        }
        throw new Exception('never get to this ResponseGetAllUsersRoles::name');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateName(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:ResponseGetAllUsersRoles::name");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getName(): string {
        if (ResponseGetAllUsersRoles::validateName($this->name))  {
            return $this->name;
        }
        throw new Exception('never get to getName ResponseGetAllUsersRoles::name');
    }

    /**
     * @return string
     */
    public static function sampleName(): string {
        return 'ResponseGetAllUsersRoles::name::33'; /*33:name*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromLastname(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toLastname(): string {
        if (ResponseGetAllUsersRoles::validateLastname($this->lastname))  {
            return $this->lastname; /*string*/
        }
        throw new Exception('never get to this ResponseGetAllUsersRoles::lastname');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateLastname(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:ResponseGetAllUsersRoles::lastname");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getLastname(): string {
        if (ResponseGetAllUsersRoles::validateLastname($this->lastname))  {
            return $this->lastname;
        }
        throw new Exception('never get to getLastname ResponseGetAllUsersRoles::lastname');
    }

    /**
     * @return string
     */
    public static function sampleLastname(): string {
        return 'ResponseGetAllUsersRoles::lastname::34'; /*34:lastname*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromImage(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toImage(): string {
        if (ResponseGetAllUsersRoles::validateImage($this->image))  {
            return $this->image; /*string*/
        }
        throw new Exception('never get to this ResponseGetAllUsersRoles::image');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateImage(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:ResponseGetAllUsersRoles::image");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getImage(): string {
        if (ResponseGetAllUsersRoles::validateImage($this->image))  {
            return $this->image;
        }
        throw new Exception('never get to getImage ResponseGetAllUsersRoles::image');
    }

    /**
     * @return string
     */
    public static function sampleImage(): string {
        return 'ResponseGetAllUsersRoles::image::35'; /*35:image*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromPhone(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toPhone(): string {
        if (ResponseGetAllUsersRoles::validatePhone($this->phone))  {
            return $this->phone; /*string*/
        }
        throw new Exception('never get to this ResponseGetAllUsersRoles::phone');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validatePhone(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:ResponseGetAllUsersRoles::phone");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getPhone(): string {
        if (ResponseGetAllUsersRoles::validatePhone($this->phone))  {
            return $this->phone;
        }
        throw new Exception('never get to getPhone ResponseGetAllUsersRoles::phone');
    }

    /**
     * @return string
     */
    public static function samplePhone(): string {
        return 'ResponseGetAllUsersRoles::phone::36'; /*36:phone*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromPassword(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toPassword(): string {
        if (ResponseGetAllUsersRoles::validatePassword($this->password))  {
            return $this->password; /*string*/
        }
        throw new Exception('never get to this ResponseGetAllUsersRoles::password');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validatePassword(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:ResponseGetAllUsersRoles::password");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getPassword(): string {
        if (ResponseGetAllUsersRoles::validatePassword($this->password))  {
            return $this->password;
        }
        throw new Exception('never get to getPassword ResponseGetAllUsersRoles::password');
    }

    /**
     * @return string
     */
    public static function samplePassword(): string {
        return 'ResponseGetAllUsersRoles::password::37'; /*37:password*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromNotificationToken(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toNotificationToken(): string {
        if (ResponseGetAllUsersRoles::validateNotificationToken($this->notificationToken))  {
            return $this->notificationToken; /*string*/
        }
        throw new Exception('never get to this ResponseGetAllUsersRoles::notificationToken');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateNotificationToken(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:ResponseGetAllUsersRoles::notificationToken");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getNotificationToken(): string {
        if (ResponseGetAllUsersRoles::validateNotificationToken($this->notificationToken))  {
            return $this->notificationToken;
        }
        throw new Exception('never get to getNotificationToken ResponseGetAllUsersRoles::notificationToken');
    }

    /**
     * @return string
     */
    public static function sampleNotificationToken(): string {
        return 'ResponseGetAllUsersRoles::notificationToken::38'; /*38:notificationToken*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromRoles(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toRoles(): string {
        if (ResponseGetAllUsersRoles::validateRoles($this->roles))  {
            return $this->roles; /*string*/
        }
        throw new Exception('never get to this ResponseGetAllUsersRoles::roles');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateRoles(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:ResponseGetAllUsersRoles::roles");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getRoles(): string {
        if (ResponseGetAllUsersRoles::validateRoles($this->roles))  {
            return $this->roles;
        }
        throw new Exception('never get to getRoles ResponseGetAllUsersRoles::roles');
    }

    /**
     * @return string
     */
    public static function sampleRoles(): string {
        return 'ResponseGetAllUsersRoles::roles::39'; /*39:roles*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return ResponseGetAllUsersRoles::validateID($this->id)
        || ResponseGetAllUsersRoles::validateEmail($this->email)
        || ResponseGetAllUsersRoles::validateName($this->name)
        || ResponseGetAllUsersRoles::validateLastname($this->lastname)
        || ResponseGetAllUsersRoles::validateImage($this->image)
        || ResponseGetAllUsersRoles::validatePhone($this->phone)
        || ResponseGetAllUsersRoles::validatePassword($this->password)
        || ResponseGetAllUsersRoles::validateNotificationToken($this->notificationToken)
        || ResponseGetAllUsersRoles::validateRoles($this->roles);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'id'} = $this->toID();
        $out->{'email'} = $this->toEmail();
        $out->{'name'} = $this->toName();
        $out->{'lastname'} = $this->toLastname();
        $out->{'image'} = $this->toImage();
        $out->{'phone'} = $this->toPhone();
        $out->{'password'} = $this->toPassword();
        $out->{'notification_token'} = $this->toNotificationToken();
        $out->{'roles'} = $this->toRoles();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return ResponseGetAllUsersRoles
     * @throws Exception
     */
    public static function from(stdClass $obj): ResponseGetAllUsersRoles {
        return new ResponseGetAllUsersRoles(
         ResponseGetAllUsersRoles::fromID($obj->{'id'})
        ,ResponseGetAllUsersRoles::fromEmail($obj->{'email'})
        ,ResponseGetAllUsersRoles::fromName($obj->{'name'})
        ,ResponseGetAllUsersRoles::fromLastname($obj->{'lastname'})
        ,ResponseGetAllUsersRoles::fromImage($obj->{'image'})
        ,ResponseGetAllUsersRoles::fromPhone($obj->{'phone'})
        ,ResponseGetAllUsersRoles::fromPassword($obj->{'password'})
        ,ResponseGetAllUsersRoles::fromNotificationToken($obj->{'notification_token'})
        ,ResponseGetAllUsersRoles::fromRoles($obj->{'roles'})
        );
    }

    /**
     * @return ResponseGetAllUsersRoles
     */
    public static function sample(): ResponseGetAllUsersRoles {
        return new ResponseGetAllUsersRoles(
         ResponseGetAllUsersRoles::sampleID()
        ,ResponseGetAllUsersRoles::sampleEmail()
        ,ResponseGetAllUsersRoles::sampleName()
        ,ResponseGetAllUsersRoles::sampleLastname()
        ,ResponseGetAllUsersRoles::sampleImage()
        ,ResponseGetAllUsersRoles::samplePhone()
        ,ResponseGetAllUsersRoles::samplePassword()
        ,ResponseGetAllUsersRoles::sampleNotificationToken()
        ,ResponseGetAllUsersRoles::sampleRoles()
        );
    }
}
